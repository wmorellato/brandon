{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>An utility to create command line application stubs from a YAML Specification. For now, the only available language for creating stubs is Python, in a multifile structure. The builders page has details about builders.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>Brandon - An utility to create command line applications from their YAML specifications.\n\nUsage:\n    brandon [command]\n\nCommands:\n    brandon generate project|docs|summary     Generation of different parts of the project.\n    brandon version                           Show the version and exit.\n</code></pre>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Weslley Morellato Bueno :  </li> </ul>"},{"location":"reference/docs/","title":"docs","text":"<p>Generate the project documentation using MkDocs from the CLI specification file pointed by FILENAME.</p>"},{"location":"reference/docs/#usage","title":"Usage","text":"<p><code>$ brandon generate docs &lt;filename&gt; [-o|--output-path]</code></p>"},{"location":"reference/docs/#arguments","title":"Arguments","text":"Argument Type Description Example <code>filename</code> string The path to the CLI Specification file describing the application."},{"location":"reference/docs/#options","title":"Options","text":"Option Type Description Default Example <code>output-path</code> string Set the output path for the documentation. Current directory"},{"location":"reference/enums/","title":"Enums","text":"<p>Enumerations used by the project.</p>"},{"location":"reference/enums/#languages","title":"Languages","text":"<p>Supported languages to create application stubs.</p> Key Value <code>python</code> python"},{"location":"reference/enums/#pythonarglibs","title":"PythonArgLibs","text":"<p>Supported Python libraries for parsing command line arguments.</p> Key Value <code>click</code> click"},{"location":"reference/project/","title":"project","text":"<p>Generate the project structure and the command line interface from the CLI specification file pointed by FILENAME.</p>"},{"location":"reference/project/#usage","title":"Usage","text":"<p><code>$ brandon generate project &lt;filename&gt; [-f|--overwrite] [-l|--language] [-o|--output-path]</code></p>"},{"location":"reference/project/#arguments","title":"Arguments","text":"Argument Type Description Example <code>filename</code> string The path to the CLI Specification file describing the application."},{"location":"reference/project/#options","title":"Options","text":"Option Type Description Default Example <code>overwrite</code> flag If there is a project folder in the path pointed by <code>output-path</code> option, overwrites its contents. <code>language</code> string Overwrite the default output language, which is defined from the first language provided in the <code>languages</code> key. java <code>output-path</code> string Set the output path for the project folder. Current directory"},{"location":"reference/summary/","title":"summary","text":"<p>Generate a summary of the command line interface, to be used somewhere else, from the CLI specification file pointed by FILENAME.</p>"},{"location":"reference/summary/#usage","title":"Usage","text":"<p><code>$ brandon generate summary &lt;filename&gt;</code></p>"},{"location":"reference/summary/#arguments","title":"Arguments","text":"Argument Type Description Example <code>filename</code> string The path to the CLI Specification file describing the application."},{"location":"reference/version/","title":"version","text":"<p>Show the version and exit.</p>"},{"location":"reference/version/#usage","title":"Usage","text":"<p><code>$ brandon version</code></p>"},{"location":"reference/builders/docs/","title":"Docs Builder","text":"<p>Documentation is created and built using MkDocs, with Material as the default theme.</p> <p>There's a lot of customization that can be done to the site, including changing colors, fonts, icons and add custom JS/CSS code. I recommend checking both resources above so you can customize the website according to your needs.</p>"},{"location":"reference/builders/docs/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation has the following structure. The <code>docs</code> directory contain the Markdown files for the actual pages. Groups have their own folders inside, and inside them, each command has a separate Markdown file.</p> <p>The <code>mkdocs.yml</code> file is required by MkDocs to build the website. You can edit this file to customize it.</p> <pre><code>{app}-docs\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 reference\n\u2502       \u251c\u2500\u2500 enums.md\n\u2502       \u2514\u2500\u2500 {group}\n\u2502           \u2514\u2500\u2500 {command}.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"reference/builders/python/","title":"Python Builder","text":"<p>The Python builder is maintained by the authors of Brandon and provides a basic CLI Python boilerplate. The project can also be extended to serve a REST API or a library.</p>"},{"location":"reference/builders/python/#project-structure","title":"Project Structure","text":"<p>Below is the project structure generated by this builder. Command groups will have separate files for themselves under the <code>cli</code> directory, and are imported by the <code>main</code> module. Dependencies are specified in the <code>pyproject.toml</code> file, together with the name of the executable to be installed and other metadata.</p> <pre><code>{app}-{version}\n\u251c\u2500\u2500 {app}\n\u2502   \u251c\u2500\u2500 cli\n\u2502   \u2502   \u251c\u2500\u2500 {group1}.py\n|   |   \u251c\u2500\u2500 {group2}.py\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 schemas.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tests\n</code></pre>"},{"location":"reference/builders/python/#dependencies","title":"Dependencies","text":"<p>The command line parser library used in this builder is Click, which is currently set to version <code>8.1</code>. </p> <p>The packaging and dependency management is done using Poetry.</p>"},{"location":"reference/builders/python/#naming-conventions","title":"Naming Conventions","text":"<p>The following naming conventions were used when generating the stub. Characters that don't comply with the naming convention will be removed when reading the specification file.</p> Type Case Format Spec Example Code Example App name and executable Lower <code>[A-Za-z0-9-_]</code> <code>My-App</code> <code>My-App</code> Classes Title <code>[A-Za-z0-9]</code> <code>output-formats</code> <code>OutputFormats</code> Enum Keys Upper <code>[A-Z0-9_]</code> <code>key-1</code> <code>KEY_1</code> Methods, Functions Snake <code>[a-z0-9_]</code> <code>my-command</code> <code>my_command</code> Parameters Snake <code>[a-z0-9_]</code> <code>my-argument</code> <code>my_argument</code>"},{"location":"specification/examples/","title":"Examples","text":"<p>Here you can find a few examples for the YAML specification for command line applications.</p>"},{"location":"specification/examples/#brandon","title":"Brandon","text":"<p>The first one is the specification for Brandon itself, also available in the main repo.</p> <pre><code>name: Brandon\nversion: 0.0.1\ndescription: An utility to create command line applications from their YAML specifications.\ntags: ['cli', 'stub', 'docs']\nauthors:\n- name: Weslley Morellato Bueno\nemail: morellato.weslley@gmail.com\nurl: https://github.com/wmorellato\nlicense: MIT License\nurl: https://github.com/wmorellato/brandon\nlanguages: ['python']\nschemas:\nenums:\nlanguages:\ndescription: Supported languages to create application stubs.\nitems:\npython: python\nbash: bash\njava: java\npython-arg-libs:\ndescription: Supported Python libraries for parsing command line arguments.\nitems:\nclick: click\ncli:\ngenerate:\ndescription: Generation of different parts of the project.\narguments:\nfilename:\ndescription: The path to the CLI Specification file describing the application.\ntype: string\ncommands:\nproject:\ndescription: Generate the project structure and the command line interface from the CLI specification file pointed by FILENAME.\noptions:\noverwrite:\ndescription: If there is a project folder in the path pointed by `output-path` option, overwrites its contents.\nshort: f\ntype: flag\nlanguage:\ndescription: Overwrite the default output language, which is defined from the first language provided in the `languages` key.\nshort: l\ntype: string\nexample: java\noutput-path:\ndescription: Set the output path for the project folder.\ntype: string\nshort: o\ndefault: Current directory\ndocs:\ndescription: Generate the project documentation using MkDocs from the CLI specification file pointed by FILENAME.\noptions:\noutput-path:\ndescription: Set the output path for the documentation.\ntype: string\nshort: o\ndefault: Current directory\nsummary:\ndescription: Generate a summary of the command line interface, to be used somewhere else, from the CLI specification file pointed by FILENAME.\nversion:\ndescription: Show the version and exit.\n</code></pre>"},{"location":"specification/spec/","title":"Specification - 0.0.2","text":"<p>Specification to describe a machine-readeable structure of a command line application. The CLI application description can be passed to Brandon to create a stub command line application in different languages and also automatically build documentation.</p> <p>Note Required fields are marked with *</p>"},{"location":"specification/spec/#application-object","title":"Application Object","text":"<p>This is the root object of the specification and provides general information about the application.</p> Field Type Description <code>name</code>* string The application name. Spaces are allowed. <code>version</code>* string The application version, following any standards you want. <code>description</code>* string A short description of the application. <code>tags</code> array[string] A list of tags related to the application. <code>authors</code>* array[Author Object] A list of contributing authors to the application. <code>license</code> string The name of the license used by the application. <code>url</code> string The URL of the application source code. <code>languages</code> array[string] A list of programming languages used in the application. <code>schemas</code> Schema Object Schema definitions used by the application. <code>cli</code>* CLI Object The command line interface."},{"location":"specification/spec/#example","title":"Example","text":"<pre><code>name: My Application\nversion: 0.0.1\ndescription: A sample description.\ntags: ['tag1', 'tag2']\nauthors:\n- name: Jane Doe\nemail: janedoe@mail.com\nurl: https://github.com/janedoe\nlicense: MIT License\nurl: https://github.com/foo/bar\nlanguages: ['python', 'shell']\nschemas:\n...\ncli:\n...\n</code></pre>"},{"location":"specification/spec/#author-object","title":"Author Object","text":"<p>This object is a simple description of the parties involved in the project.</p> Pattern Type Description <code>name</code>* string The person's name or full name. <code>email</code> string The person's email address. <code>url</code> string A personal or professional URL owned by the person."},{"location":"specification/spec/#schema-object","title":"Schema Object","text":"<p>Define application schemas that are visible to the user. For now it doesn't support custom schemas, only enumerations and in the near future global parameters to be referenced by commands.</p> Field Type Description <code>enums</code> Enum Object Enumerations used by the application and exposed to the user."},{"location":"specification/spec/#enum-object","title":"Enum Object","text":"<p>You can use enumerations to limit a given argument or option to a set of choices or to simply describe internal logic of the application.</p> Pattern Type Description <code>{name}</code>* Enum Item Object The name of the enumeration."},{"location":"specification/spec/#enum-item-object","title":"Enum Item Object","text":"Field Type Description <code>description</code> string A short description for this enumeration <code>items</code> Key Value Object The enumeration key. It MUST be unique."},{"location":"specification/spec/#key-value-object","title":"Key Value Object","text":"Pattern Type Description <code>{key}</code>* string The enumeration key. It MUST be unique. <code>{value}</code>* Data Type Enum The value for they key."},{"location":"specification/spec/#example_1","title":"Example","text":"<p>The example below defines two enumerations, the first for document formats supported by the application and the second for a list of supported encodings.</p>"},{"location":"specification/spec/#definition","title":"Definition","text":"<pre><code>schemas:\nenumerations:\nformats:\ndescription: Supported formats to export text.\nitems:\npdf: pdf\nword: docx\nmarkdown: md\nhtml: html\nencodings:\ndescription: Supported encodings for reading data.\nitems:\nascii: 0\nutf-8: 1\nutf-16: 2\n</code></pre>"},{"location":"specification/spec/#cli-object","title":"CLI Object","text":"<p>This object contains mappings between command/group names and their definitions.</p> Pattern Type Description <code>{name}</code>* Command Item Object | Group Item Object The command to a single or group of operations in the application. This name SHOULD be lowercase and SHOULD contain only alpha characters, underscores or dashes. <code>enums</code> Enum Object Enumerations used in the application to be used as a fixed set of choices for certain commands."},{"location":"specification/spec/#example_2","title":"Example","text":"<p>The example below defines a group of commands named <code>services</code> and the generic <code>help</code> command.</p>"},{"location":"specification/spec/#definition_1","title":"Definition","text":"<pre><code>...\ncli:\nservices:\n...\nhelp:\n...\n</code></pre>"},{"location":"specification/spec/#usage","title":"Usage","text":"<p><code>$ my-application services &lt;operation&gt;</code> <code>$ my-application help</code> </p>"},{"location":"specification/spec/#group-item-object","title":"Group Item Object","text":"<p>An object that describes a group of related commands. Note that it is not allowed to nest groups of commands.</p> Field Type Description <code>description</code>* string A short description to be applied to all commands under this group. <code>arguments</code> Parameter Object The arguments common to all commands under this group <code>options</code> Parameter Object The options common to all commands under this group. <code>commands</code>* Command Object Mapping of command names and their definitions."},{"location":"specification/spec/#example_3","title":"Example","text":"<p>Using the same example as above, the snippet below defines a group of commands named <code>get</code>, which could be used to get different types of objects managed by the application.</p>"},{"location":"specification/spec/#definition_2","title":"Definition","text":"<pre><code>...\ncli:\nservices:\ndescription: Perform operations on services managed by the application.\ncommands:\nstart:\n...\nstop:\n...\n</code></pre>"},{"location":"specification/spec/#usage_1","title":"Usage","text":"<p><code>$ my-application services start</code> <code>$ my-application services stop</code> </p>"},{"location":"specification/spec/#command-object","title":"Command Object","text":"Pattern Type Description <code>{name}</code>* Command Item Object The name of an operation. This name SHOULD be lowercase and SHOULD contain only alpha characters, underscores or dashes."},{"location":"specification/spec/#command-item-object","title":"Command Item Object","text":"<p>This object defines a command that maps to a single operation in the application. The command MAY have positional arguments and options to alter its behavior.</p> Field Type Description <code>description</code>* string A short description for this specific operation. <code>arguments</code> Parameter Object The positional arguments used by this command. <code>options</code> Parameter Object The options used by this command."},{"location":"specification/spec/#example_4","title":"Example","text":"<p>The example below defines the <code>start</code> command under the <code>services</code> group.</p>"},{"location":"specification/spec/#definition_3","title":"Definition","text":"<pre><code>...\ncli:\nservices:\ndescription: Perform operations on services managed by the application.\ncommands:\nstart:\ndescription: Start one or more named services in the application.\narguments:\n...\noptions:\n...\n</code></pre>"},{"location":"specification/spec/#usage_2","title":"Usage","text":"<p><code>$ my-application services start</code></p>"},{"location":"specification/spec/#parameter-object","title":"Parameter Object","text":"Pattern Type Description <code>{name}</code>* Argument Object | Option Object The name of the parameter. This name SHOULD be lowercase and SHOULD contain only alpha characters, underscores or dashes."},{"location":"specification/spec/#argument-item-object","title":"Argument Item Object","text":"<p>Used to define a positional parameter for the given operation. Arguments MUST have types, as most CLI libraries check types when parsing the command line. It's also useful to provide an example and a description. These parameters are required by default.</p> <p>The name of the argument will be used as the name of the variable that will hold the value after parsing. (Isso vale pra bibliotecas de outras linguagens?)</p> Field Type Description <code>description</code> string A short description for this argument. <code>type</code>* Type Enum The type of this argument. Check the list of types below. <code>example</code> string An example value for this argument."},{"location":"specification/spec/#example_5","title":"Example","text":"<p>Taking <code>systemctl</code> <code>restart</code> command as an example, we'll define the <code>unit</code> argument, which is the name of the unit to be restarted.</p>"},{"location":"specification/spec/#definition_4","title":"Definition","text":"<pre><code>...\ncli:\nrestart:\ndescription: Start or restart one or more units.\narguments:\nunit:\ndescription: The name of the unit to be restarted.\ntype: string\nexample: NetworkManager\n</code></pre>"},{"location":"specification/spec/#usage_3","title":"Usage","text":"<p><code># systemctl restart NetworkManager.service</code></p>"},{"location":"specification/spec/#option-object","title":"Option Object","text":"<p>Used to the define an option to be passed to the command to alter the command's default behavior.</p> <p>As it is with arguments, options also MUST define a type. Some options' default values may be easily guessed (e.g. <code>--show-wide</code> implies that the default value is <code>false</code>), but it's recommended to set the default value for options nonetheless.</p> <p>Options may also provide a short name (e.g. <code>-a</code> for <code>--all</code> in <code>ls</code>), but this is not required.</p> Field Type Description <code>description</code> string A short description for this option. <code>short</code> string The short name of this option. Don't prepend dashes here. <code>type</code>* Type Enum The type of this option. Check the list of types below. <code>default</code> [type] The default value for this option. <code>example</code> string An example value for this option."},{"location":"specification/spec/#example_6","title":"Example","text":"<p>Using the same example of the <code>systemctl</code> application, we can define the <code>--host</code> option, which makes <code>systemctl</code> to operate on a remote host.</p>"},{"location":"specification/spec/#definition_5","title":"Definition","text":"<pre><code>...\ncli:\nrestart:\ndescription: Start or restart one or more units.\narguments:\n...\noptions:\nhost:\ndescription: Operate on remote host.\nshort: H\ntype: string\nexample: john@remote.host\n</code></pre>"},{"location":"specification/spec/#usage_4","title":"Usage","text":"<p><code># systemctl --host root@10.0.2.15 restart NetworkManager.service</code></p>"},{"location":"specification/spec/#type-enum","title":"Type Enum","text":"<p>List of types supported in arguments and options.</p> Type int float string bool flag"},{"location":"specification/spec/#data-type-enum","title":"Data Type Enum","text":"Type int float string"}]}